IMPORTANTE: al principio no había manera de que funcionara. No daba ningún error, pero Alexa no decía nada de nada. Generé de nuevo la cookie, y entonces todo comenzó a funcionar a la primera !!??
Moraleja: a la que deje de funcionar, intentar generar de nuevo la cookie	



https://www.codementor.io/@slavko/controlling-amazon-echo-dot-with-shell-a-bit-of-fun-mz6xxz92n


Cookies needed to work with "API"
To work with Echodot api via curl or wget, the easiest would be to store necessary session cookies in cookies.txt file.
Format: the layout of Netscape's cookies.txt file is such that each line contains one name-value pair.

An entry that looks like this:

.netscape.com   TRUE   /   FALSE   946684799   NETSCAPE_ID   100103
Each line represents a single piece of stored information. A tab is inserted between each of the fields.

From left-to-right, here is what each field represents:

domain - The domain that created AND that can read the variable.

flag - A TRUE/FALSE value indicating if all machines within a given domain can access the variable. This value is set automatically by the browser, depending on the value you set for domain.

path - The path within the domain that the variable is valid for.

secure - A TRUE/FALSE value indicating if a secure connection with the domain is needed to access the variable.

expiration - The UNIX time that the variable will expire on. UNIX time is defined as the number of seconds since Jan 1, 1970 00:00:00 GMT.

name - The name of the variable.

value - The value of the variable.

For working with Amazon Alexa API following minimal set of cookies is used:

.amazon.com	TRUE	/	FALSE	<expiration>	ubid-main	<censored>
.amazon.com	TRUE	/	FALSE	<expiration>	csrf	<censored>
.amazon.com	TRUE	/	FALSE	<expiration>	session-id	<censored>
.amazon.com	TRUE	/	FALSE	<expiration>	x-main	"<censored>"
.amazon.com	TRUE	/	FALSE	<expiration>	session-token	"<censored>"
.amazon.com	TRUE	/	TRUE	<expiration>	at-main	<censored>
Expiration can be set to some distant time in the future, like 2038 2177406671 , but it is not clear, if it really prolonges session,
even if api is pinged from time to time.

Manual way to retrieve alexa session cookies
Open anonymous tab, saying in Firefox browser. Use extension kind of https://github.com/rotemdan/ExportCookies to export cookies for amazon.com domain. Filter only cookies related to above.

Haven't compared, but other browsers should allow exporting cookies more or less easily too.

More or less automated way to retrieve alexa session cookies
Approach found on https://github.com/Apollon77/alexa-cookie can be used. It returns mostly cookie that plays well with
https://github.com/Apollon77/alexa-remote

thus I had to modify slightly as alexa-node-cookie-helper to return also cookie.txt compatible output


node ./get-cookies-txt.js
What is good with that approach, is that if you get captcha (very often for USA amazon.com domain) - you have possibility to still login interactively and get necessary cookies

Invoking alexa commands from the shell
Now you are able to place retrieved session cookies into /tmp/.alexa.cookie and use she

Here still the best is shell script https://github.com/thorsten-gehrig/alexa-remote-control by Thorsten Gehrig.
Which provides few useful options


alexa.sh [-d <device>|ALL] -e <pause|play|next|prev|fwd|rwd|shuffle|vol:<0-100>> |
          -b [list|<"AA:BB:CC:DD:EE:FF">] | -q | -r <"station name"|stationid> |
          -s <trackID|'Artist' 'Album'> | -t <ASIN> | -u <seedID> | -v <queueID> | -w <playlistId> |
          -i | -p | -P | -S | -a | -m <multiroom_device> [device_1 .. device_X] | -lastalexa | -l | -h

   -e : run command, additional SEQUENCECMDs:
        weather,traffic,flashbriefing,goodmorning,singasong,tellstory,speak:'<text>',automation:'<routine name>'
   -b : connect/disconnect/list bluetooth device
   -q : query queue
   -r : play tunein radio
   -s : play library track/library album
   -t : play Prime playlist
   -u : play Prime station
   -v : play Prime historical queue
   -w : play library playlist
   -i : list imported library tracks
   -p : list purchased library tracks
   -P : list Prime playlists
   -S : list Prime stations
   -a : list available devices
   -m : delete multiroom and/or create new multiroom containing devices
   -lastalexa : print device that received the last voice command
I am using alexa for some custom notifications, thus TTS option is expecially kind of interest for me


alexa.sh -d RZ -e "speak: 'meow'"
other automations are covered by openhab.
